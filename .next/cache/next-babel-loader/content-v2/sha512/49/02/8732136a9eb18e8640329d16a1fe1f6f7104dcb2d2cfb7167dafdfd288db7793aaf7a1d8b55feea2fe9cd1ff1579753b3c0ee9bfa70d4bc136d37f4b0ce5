{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/jonathanreis/Projects/BareGenerator/components/models.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport * as THREE from 'three';\nimport { centerObjects, leftObjects, mirrorObjects, rightObjects } from './rawModels';\nimport React, { Suspense, useState, useRef, useEffect } from 'react';\nimport { Canvas, useFrame, createPortal } from '@react-three/fiber';\nimport { useGLTF, Stage, Sky, Stars, useFBO, OrbitControls, rotation, PerspectiveCamera, CameraShake, ContactShadows } from '@react-three/drei';\n/**\n * 1. Choose a random object from the input objects\n * 2. Hydrate the object with scene, nodes, and materials via useGLFT\n * 3. Return the plain object combined with the hydrated fields\n */\n\nconst chooseAndHydrateObject = objects => {\n  const randomIndex = Math.floor(Math.random() * objects.length);\n  const randomObject = objects[randomIndex];\n  const {\n    materialName,\n    pathname,\n    position,\n    rotation,\n    scale\n  } = randomObject;\n  const {\n    scene,\n    nodes,\n    materials\n  } = useGLTF(`./about-pictures/${pathname}.glb`);\n  const material = materials[materialName];\n  const geometry = nodes[pathname].geometry; // console.log(pathname);\n\n  return {\n    geometry,\n    material,\n    position,\n    rotation,\n    scale,\n    scene\n  };\n};\n\nexport function ObjectListMirror(props) {\n  let randomObject;\n  useEffect(() => {\n    randomObject = chooseAndHydrateObject(mirrorObjects);\n    debugger;\n  }, []);\n  const group = useRef();\n  useFrame(state => {\n    // This function runs 60 times/second, it binds this component to the render-loop.\n    // On unmount this subscription is cleaned up automatically.\n    const t = state.clock.getElapsedTime(); // Make it float\n\n    group.current.rotation.z = Math.sin(t / 12) / 5;\n    group.current.rotation.x = Math.cos(t) / 9;\n    group.current.rotation.y = Math.sin(t / 12) / 5;\n    group.current.position.y = 0.5 + (1 + Math.sin(t / 10)) / 5;\n  });\n  console.log('renderMirror');\n  return randomObject ? /*#__PURE__*/_jsxDEV(\"group\", _objectSpread(_objectSpread({\n    ref: group\n  }, props), {}, {\n    dispose: null,\n    children: /*#__PURE__*/_jsxDEV(\"group\", {\n      rotation: randomObject.rotation,\n      scale: randomObject.scale,\n      position: randomObject.position,\n      children: /*#__PURE__*/_jsxDEV(\"mesh\", _objectSpread(_objectSpread({\n        object: randomObject.scene\n      }, props), {}, {\n        castShadow: true,\n        receiveShadow: true,\n        geometry: randomObject.geometry,\n        material: randomObject.material\n      }), void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this)\n  }), void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 5\n  }, this) : null;\n}\nexport function ObjectListCenter(props) {\n  const randomObject = chooseAndHydrateObject(centerObjects);\n  const group = useRef();\n  useFrame(state => {\n    // This function runs 60 times/second, it binds this component to the render-loop.\n    // On unmount this subscription is cleaned up automatically.\n    const t = state.clock.getElapsedTime(); // Make it float\n\n    group.current.rotation.z = Math.sin(t / 90) / 5;\n    group.current.rotation.x = Math.cos(t) / 70;\n    group.current.rotation.y = Math.sin(t / 90) / 5;\n    group.current.position.y = 0.5 + (1 + Math.sin(t / 10)) / 5;\n  });\n  console.log('renderCenter');\n  return /*#__PURE__*/_jsxDEV(\"group\", _objectSpread(_objectSpread({\n    ref: group\n  }, props), {}, {\n    dispose: null,\n    children: /*#__PURE__*/_jsxDEV(\"group\", {\n      rotation: randomObject.rotation,\n      scale: randomObject.scale,\n      position: randomObject.position,\n      children: /*#__PURE__*/_jsxDEV(\"mesh\", _objectSpread(_objectSpread({\n        object: randomObject.scene\n      }, props), {}, {\n        castShadow: true,\n        receiveShadow: true,\n        geometry: randomObject.geometry,\n        material: randomObject.material\n      }), void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this)\n  }), void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 88,\n    columnNumber: 5\n  }, this);\n}\nexport function ObjectListRight(props) {\n  const randomObject = chooseAndHydrateObject(rightObjects);\n  const group = useRef();\n  console.log('renderRight');\n  return /*#__PURE__*/_jsxDEV(\"group\", _objectSpread(_objectSpread({\n    ref: group\n  }, props), {}, {\n    dispose: null,\n    children: /*#__PURE__*/_jsxDEV(\"group\", {\n      rotation: randomObject.rotation,\n      scale: randomObject.scale,\n      position: randomObject.position,\n      children: /*#__PURE__*/_jsxDEV(\"mesh\", _objectSpread(_objectSpread({\n        object: randomObject.scene\n      }, props), {}, {\n        castShadow: true,\n        receiveShadow: true,\n        geometry: randomObject.geometry,\n        material: randomObject.material\n      }), void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }, this)\n  }), void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 107,\n    columnNumber: 5\n  }, this);\n}\nexport function ObjectListLeft(props) {\n  const randomObject = chooseAndHydrateObject(leftObjects);\n  const group = useRef();\n  console.log('renderLeft');\n  return /*#__PURE__*/_jsxDEV(\"group\", _objectSpread(_objectSpread({\n    ref: group\n  }, props), {}, {\n    dispose: null,\n    children: /*#__PURE__*/_jsxDEV(\"group\", {\n      rotation: randomObject.rotation,\n      scale: randomObject.scale,\n      position: randomObject.position,\n      children: /*#__PURE__*/_jsxDEV(\"mesh\", _objectSpread(_objectSpread({\n        object: randomObject.scene\n      }, props), {}, {\n        castShadow: true,\n        receiveShadow: true,\n        geometry: randomObject.geometry,\n        material: randomObject.material\n      }), void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 7\n    }, this)\n  }), void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 126,\n    columnNumber: 5\n  }, this);\n}","map":{"version":3,"sources":["/Users/jonathanreis/Projects/BareGenerator/components/models.js"],"names":["THREE","centerObjects","leftObjects","mirrorObjects","rightObjects","React","Suspense","useState","useRef","useEffect","Canvas","useFrame","createPortal","useGLTF","Stage","Sky","Stars","useFBO","OrbitControls","rotation","PerspectiveCamera","CameraShake","ContactShadows","chooseAndHydrateObject","objects","randomIndex","Math","floor","random","length","randomObject","materialName","pathname","position","scale","scene","nodes","materials","material","geometry","ObjectListMirror","props","group","state","t","clock","getElapsedTime","current","z","sin","x","cos","y","console","log","ObjectListCenter","ObjectListRight","ObjectListLeft"],"mappings":"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","sourcesContent":["import * as THREE from 'three'\nimport { centerObjects, leftObjects, mirrorObjects, rightObjects } from './rawModels';\nimport React, {  Suspense, useState, useRef, useEffect } from 'react'\nimport { Canvas, useFrame, createPortal } from '@react-three/fiber'\nimport { useGLTF, Stage, Sky, Stars, useFBO, OrbitControls, rotation, PerspectiveCamera, CameraShake, ContactShadows } from '@react-three/drei'\n\n/**\n * 1. Choose a random object from the input objects\n * 2. Hydrate the object with scene, nodes, and materials via useGLFT\n * 3. Return the plain object combined with the hydrated fields\n */\nconst chooseAndHydrateObject = (objects) => {\n  const randomIndex = Math.floor(Math.random() * objects.length);\n  const randomObject = objects[randomIndex];\n  const {materialName, pathname, position, rotation, scale} = randomObject;\n  const { scene, nodes, materials } = useGLTF(`./about-pictures/${pathname}.glb`)\n\n  const material = materials[materialName];\n  const geometry = nodes[pathname].geometry;\n\n  // console.log(pathname);\n\n  return {\n    geometry,\n    material,\n    position,\n    rotation,\n    scale,\n    scene\n  }\n}\n\nexport function ObjectListMirror(props) {\n  let randomObject;\n  useEffect(() => {\n    randomObject = chooseAndHydrateObject(mirrorObjects);\n    debugger;\n  }, [])\n  const group = useRef()\n\n  useFrame((state) => {\n    // This function runs 60 times/second, it binds this component to the render-loop.\n    // On unmount this subscription is cleaned up automatically.\n\n    const t = state.clock.getElapsedTime()\n\n    // Make it float\n    group.current.rotation.z = Math.sin(t / 12) / 5\n    group.current.rotation.x = Math.cos(t) / 9\n    group.current.rotation.y = Math.sin(t / 12) / 5\n    group.current.position.y = 0.5 + (1 + Math.sin(t / 10)) / 5\n  })\n  \n  console.log('renderMirror');\n  return randomObject ? (\n    <group ref={group} {...props} dispose={null} >\n      <group rotation={randomObject.rotation} scale={randomObject.scale} position={randomObject.position} >\n        <mesh object={randomObject.scene} {...props}  \n            castShadow\n            receiveShadow\n            geometry={randomObject.geometry}\n            material={randomObject.material} />\n      </group>\n    </group>\n  ) : null;\n}\n\nexport function ObjectListCenter(props) {\n  const randomObject = chooseAndHydrateObject(centerObjects);\n  const group = useRef()\n\n  useFrame((state) => {\n    // This function runs 60 times/second, it binds this component to the render-loop.\n    // On unmount this subscription is cleaned up automatically.\n\n    const t = state.clock.getElapsedTime()\n    \n\n    // Make it float\n    group.current.rotation.z = Math.sin(t / 90) / 5\n    group.current.rotation.x = Math.cos(t) / 70\n    group.current.rotation.y = Math.sin(t / 90) / 5\n    group.current.position.y = 0.5 + (1 + Math.sin(t / 10)) / 5\n  })\n  \n  console.log('renderCenter');\n  return (\n    <group ref={group} {...props} dispose={null} >\n      <group rotation={randomObject.rotation} scale={randomObject.scale} position={randomObject.position} >\n        <mesh object={randomObject.scene} {...props}  \n            castShadow\n            receiveShadow\n            geometry={randomObject.geometry}\n            material={randomObject.material} />\n      </group>\n    </group>\n  )\n}\n\nexport function ObjectListRight(props) {  \n  const randomObject = chooseAndHydrateObject(rightObjects);\n  const group = useRef()\n\n  console.log('renderRight');\n  \n  return (\n    <group ref={group} {...props} dispose={null} >\n      <group rotation={randomObject.rotation} scale={randomObject.scale} position={randomObject.position} >\n        <mesh object={randomObject.scene} {...props}  \n            castShadow\n            receiveShadow\n            geometry={randomObject.geometry}\n            material={randomObject.material} />\n      </group>\n    </group>\n  );\n}\n\nexport function ObjectListLeft(props) {\n  const randomObject = chooseAndHydrateObject(leftObjects);\n  const group = useRef()\n\n  console.log('renderLeft');\n\n  return (\n    <group ref={group} {...props} dispose={null} >\n      <group rotation={randomObject.rotation} scale={randomObject.scale} position={randomObject.position} >\n        <mesh object={randomObject.scene} {...props}  \n            castShadow\n            receiveShadow\n            geometry={randomObject.geometry}\n            material={randomObject.material} />\n      </group>\n    </group>\n  )\n}"]},"metadata":{},"sourceType":"module"}