{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/jonathanreis/Projects/BareGenerator/components/models.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport * as THREE from 'three';\nimport { centerObjects, leftObjects, mirrorObjects, rightObjects } from './rawModels';\nimport React, { Suspense, useState, useRef } from 'react';\nimport { Canvas, useFrame, createPortal } from '@react-three/fiber';\nimport { useGLTF, Stage, Sky, Stars, useFBO, OrbitControls, rotation, PerspectiveCamera, CameraShake, ContactShadows } from '@react-three/drei';\n/**\n * 1. Choose a random object from the input objects\n * 2. Hydrate the object with scene, nodes, and materials via useGLFT\n * 3. Return the plain object combined with the hydrated fields\n */\n\nconst chooseAndHydrateObject = objects => {\n  // const randomIndex = Math.floor(Math.random() * objects.length);\n  const randomIndex = 0;\n  const randomObject = objects[randomIndex];\n  const {\n    materialName,\n    pathname,\n    position,\n    rotation,\n    scale\n  } = randomObject;\n  const {\n    scene,\n    nodes,\n    materials\n  } = useGLTF(`./about-pictures/${pathname}.glb`);\n  const material = materials[materialName];\n  const geometry = nodes[pathname].geometry;\n  console.log(pathname);\n  return {\n    geometry,\n    material,\n    position,\n    rotation,\n    scale,\n    scene\n  };\n};\n\nexport function ObjectListMirror(props) {\n  const randomObject = chooseAndHydrateObject(mirrorObjects);\n  const group = useRef();\n  useFrame(state => {\n    // This function runs 60 times/second, it binds this component to the render-loop.\n    // On unmount this subscription is cleaned up automatically.\n    const t = state.clock.getElapsedTime(); // Make it float\n\n    group.current.rotation.z = Math.sin(t / 12) / 5;\n    group.current.rotation.x = Math.cos(t) / 9;\n    group.current.rotation.y = Math.sin(t / 12) / 5;\n    group.current.position.y = 0.5 + (1 + Math.sin(t / 10)) / 5;\n  });\n  return /*#__PURE__*/_jsxDEV(\"group\", _objectSpread(_objectSpread({\n    ref: group\n  }, props), {}, {\n    dispose: null,\n    children: /*#__PURE__*/_jsxDEV(\"group\", {\n      rotation: randomObject.rotation,\n      scale: randomObject.scale,\n      position: randomObject.position,\n      children: /*#__PURE__*/_jsxDEV(\"mesh\", _objectSpread(_objectSpread({\n        object: randomObject.scene\n      }, props), {}, {\n        castShadow: true,\n        receiveShadow: true,\n        geometry: randomObject.geometry,\n        material: randomObject.material\n      }), void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this)\n  }), void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 5\n  }, this);\n}\nexport function ObjectListCenter(props) {\n  const randomObject = chooseAndHydrateObject(centerObjects);\n  const group = useRef();\n  useFrame(state => {\n    // This function runs 60 times/second, it binds this component to the render-loop.\n    // On unmount this subscription is cleaned up automatically.\n    const t = state.clock.getElapsedTime(); // Make it float\n\n    group.current.rotation.z = Math.sin(t / 90) / 5;\n    group.current.rotation.x = Math.cos(t) / 70;\n    group.current.rotation.y = Math.sin(t / 90) / 5;\n    group.current.position.y = 0.5 + (1 + Math.sin(t / 10)) / 5;\n  });\n  return /*#__PURE__*/_jsxDEV(\"group\", _objectSpread(_objectSpread({\n    ref: group\n  }, props), {}, {\n    dispose: null,\n    children: /*#__PURE__*/_jsxDEV(\"group\", {\n      rotation: randomObject.rotation,\n      scale: randomObject.scale,\n      position: randomObject.position,\n      children: /*#__PURE__*/_jsxDEV(\"mesh\", _objectSpread(_objectSpread({\n        object: randomObject.scene\n      }, props), {}, {\n        castShadow: true,\n        receiveShadow: true,\n        geometry: randomObject.geometry,\n        material: randomObject.material\n      }), void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this)\n  }), void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 5\n  }, this);\n}\nexport function ObjectListRight(props) {\n  const randomObject = chooseAndHydrateObject(rightObjects);\n  const group = useRef();\n  return /*#__PURE__*/_jsxDEV(\"group\", _objectSpread(_objectSpread({\n    ref: group\n  }, props), {}, {\n    dispose: null,\n    children: /*#__PURE__*/_jsxDEV(\"group\", {\n      rotation: randomObject.rotation,\n      scale: randomObject.scale,\n      position: randomObject.position,\n      children: /*#__PURE__*/_jsxDEV(\"mesh\", _objectSpread(_objectSpread({\n        object: randomObject.scene\n      }, props), {}, {\n        castShadow: true,\n        receiveShadow: true,\n        geometry: randomObject.geometry,\n        material: randomObject.material\n      }), void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, this)\n  }), void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 100,\n    columnNumber: 5\n  }, this);\n}\nexport function ObjectListLeft(props) {\n  const randomObject = chooseAndHydrateObject(leftObjects);\n  const group = useRef();\n  return /*#__PURE__*/_jsxDEV(\"group\", _objectSpread(_objectSpread({\n    ref: group\n  }, props), {}, {\n    dispose: null,\n    children: /*#__PURE__*/_jsxDEV(\"group\", {\n      rotation: randomObject.rotation,\n      scale: randomObject.scale,\n      position: randomObject.position,\n      children: /*#__PURE__*/_jsxDEV(\"mesh\", _objectSpread(_objectSpread({\n        object: randomObject.scene\n      }, props), {}, {\n        castShadow: true,\n        receiveShadow: true,\n        geometry: randomObject.geometry,\n        material: randomObject.material\n      }), void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }, this)\n  }), void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 117,\n    columnNumber: 5\n  }, this);\n}","map":{"version":3,"sources":["/Users/jonathanreis/Projects/BareGenerator/components/models.js"],"names":["THREE","centerObjects","leftObjects","mirrorObjects","rightObjects","React","Suspense","useState","useRef","Canvas","useFrame","createPortal","useGLTF","Stage","Sky","Stars","useFBO","OrbitControls","rotation","PerspectiveCamera","CameraShake","ContactShadows","chooseAndHydrateObject","objects","randomIndex","randomObject","materialName","pathname","position","scale","scene","nodes","materials","material","geometry","console","log","ObjectListMirror","props","group","state","t","clock","getElapsedTime","current","z","Math","sin","x","cos","y","ObjectListCenter","ObjectListRight","ObjectListLeft"],"mappings":"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","sourcesContent":["import * as THREE from 'three'\nimport { centerObjects, leftObjects, mirrorObjects, rightObjects } from './rawModels';\nimport React, {  Suspense, useState, useRef } from 'react'\nimport { Canvas, useFrame, createPortal } from '@react-three/fiber'\nimport { useGLTF, Stage, Sky, Stars, useFBO, OrbitControls, rotation, PerspectiveCamera, CameraShake, ContactShadows } from '@react-three/drei'\n\n/**\n * 1. Choose a random object from the input objects\n * 2. Hydrate the object with scene, nodes, and materials via useGLFT\n * 3. Return the plain object combined with the hydrated fields\n */\nconst chooseAndHydrateObject = (objects) => {\n  // const randomIndex = Math.floor(Math.random() * objects.length);\n  const randomIndex = 0;\n  const randomObject = objects[randomIndex];\n  const {materialName, pathname, position, rotation, scale} = randomObject;\n  const { scene, nodes, materials } = useGLTF(`./about-pictures/${pathname}.glb`)\n\n  const material = materials[materialName];\n  const geometry = nodes[pathname].geometry;\n\n  console.log(pathname);\n\n  return {\n    geometry,\n    material,\n    position,\n    rotation,\n    scale,\n    scene\n  }\n}\n\nexport function ObjectListMirror(props) {\n  const randomObject = chooseAndHydrateObject(mirrorObjects);\n  const group = useRef()\n\n  useFrame((state) => {\n    // This function runs 60 times/second, it binds this component to the render-loop.\n    // On unmount this subscription is cleaned up automatically.\n\n    const t = state.clock.getElapsedTime()\n\n    // Make it float\n    group.current.rotation.z = Math.sin(t / 12) / 5\n    group.current.rotation.x = Math.cos(t) / 9\n    group.current.rotation.y = Math.sin(t / 12) / 5\n    group.current.position.y = 0.5 + (1 + Math.sin(t / 10)) / 5\n  })\n  \n  return (\n    <group ref={group} {...props} dispose={null} >\n      <group rotation={randomObject.rotation} scale={randomObject.scale} position={randomObject.position} >\n        <mesh object={randomObject.scene} {...props}  \n            castShadow\n            receiveShadow\n            geometry={randomObject.geometry}\n            material={randomObject.material} />\n      </group>\n    </group>\n  )\n}\n\nexport function ObjectListCenter(props) {\n  const randomObject = chooseAndHydrateObject(centerObjects);\n  const group = useRef()\n\n  useFrame((state) => {\n    // This function runs 60 times/second, it binds this component to the render-loop.\n    // On unmount this subscription is cleaned up automatically.\n\n    const t = state.clock.getElapsedTime()\n    \n\n    // Make it float\n    group.current.rotation.z = Math.sin(t / 90) / 5\n    group.current.rotation.x = Math.cos(t) / 70\n    group.current.rotation.y = Math.sin(t / 90) / 5\n    group.current.position.y = 0.5 + (1 + Math.sin(t / 10)) / 5\n  })\n  \n  return (\n    <group ref={group} {...props} dispose={null} >\n      <group rotation={randomObject.rotation} scale={randomObject.scale} position={randomObject.position} >\n        <mesh object={randomObject.scene} {...props}  \n            castShadow\n            receiveShadow\n            geometry={randomObject.geometry}\n            material={randomObject.material} />\n      </group>\n    </group>\n  )\n}\n\nexport function ObjectListRight(props) {  \n  const randomObject = chooseAndHydrateObject(rightObjects);\n  const group = useRef()\n  \n  return (\n    <group ref={group} {...props} dispose={null} >\n      <group rotation={randomObject.rotation} scale={randomObject.scale} position={randomObject.position} >\n        <mesh object={randomObject.scene} {...props}  \n            castShadow\n            receiveShadow\n            geometry={randomObject.geometry}\n            material={randomObject.material} />\n      </group>\n    </group>\n  );\n}\n\nexport function ObjectListLeft(props) {\n  const randomObject = chooseAndHydrateObject(leftObjects);\n  const group = useRef()\n\n  return (\n    <group ref={group} {...props} dispose={null} >\n      <group rotation={randomObject.rotation} scale={randomObject.scale} position={randomObject.position} >\n        <mesh object={randomObject.scene} {...props}  \n            castShadow\n            receiveShadow\n            geometry={randomObject.geometry}\n            material={randomObject.material} />\n      </group>\n    </group>\n  )\n}"]},"metadata":{},"sourceType":"module"}